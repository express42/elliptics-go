// +build linux,cgo

package elliptics_test

import (
	. "."
	. "launchpad.net/gocheck"
)

type K struct{}

var _ = Suite(&K{})

func (*K) TestKey(c *C) {
	k := &Key{}
	c.Check(k.Short(), HasLen, 12)
	c.Check(k.Short(), Equals, "000000000000")
	c.Check(k.String(), HasLen, 128)
	c.Check(k.String(), Equals, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	c.Check(k.GoString(), Equals, "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 "+
		"(elliptics._Ctype_struct_dnet_id{id:[]byte{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, "+
		"0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, "+
		"0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, group_id:0x0, _type:0})")

	k = NewKey(":")
	c.Check(k.Short(), HasLen, 12)
	c.Check(k.Short(), Equals, "e6e81040502d")
	c.Check(k.String(), HasLen, 128)
	c.Check(k.String(), Equals, "e6e81040502d36d3d83a43be4610f1478bdf267b243223ef27da7418a4af3645a6d716f0f926cea22790cb1903227ed2e754ca7f2c40c17d180704ee47f7330f")
	c.Check(k.GoString(), Equals, "e6e81040502d36d3d83a43be4610f1478bdf267b243223ef27da7418a4af3645a6d716f0f926cea22790cb1903227ed2e754ca7f2c40c17d180704ee47f7330f "+
		"(elliptics._Ctype_struct_dnet_id{id:[]byte{0xe6, 0xe8, 0x10, 0x40, 0x50, 0x2d, 0x36, 0xd3, 0xd8, 0x3a, 0x43, 0xbe, 0x46, 0x10, 0xf1, 0x47, 0x8b, 0xdf, 0x26, "+
		"0x7b, 0x24, 0x32, 0x23, 0xef, 0x27, 0xda, 0x74, 0x18, 0xa4, 0xaf, 0x36, 0x45, 0xa6, 0xd7, 0x16, 0xf0, 0xf9, 0x26, 0xce, 0xa2, 0x27, 0x90, 0xcb, 0x19, 0x3, "+
		"0x22, 0x7e, 0xd2, 0xe7, 0x54, 0xca, 0x7f, 0x2c, 0x40, 0xc1, 0x7d, 0x18, 0x7, 0x4, 0xee, 0x47, 0xf7, 0x33, 0xf}, group_id:0x0, _type:0})")
}
